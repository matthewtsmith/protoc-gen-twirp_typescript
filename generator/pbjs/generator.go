package pbjs

import (
	"bytes"
	"strings"
	"text/template"

	"github.com/golang/protobuf/proto"
	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
)

const tmpl = `// Generated by protoc-gen-twirp_typescript. DO NOT EDIT
import {twitch} from './service.pb';
import {createTwirpAdapter} from './twirp';

const getServiceMethodName = (fn: any): string => {
    {{- range $s := .Services}}
	{{- range $m := $s.Methods}}
	if (fn == {{$s.Package}}.{{$s.Name}}.prototype.{{lowerCamel $m}}) {
		return '{{$m}}';
    }
	{{- end}}
	{{- end}}

    throw 'Unknown Method';
};

{{range .Services}}
export const create{{.Name}} = (hostname: string): {{.Package}}.{{.Name}} => {
    return {{.Package}}.{{.Name}}.create(createTwirpAdapter(hostname + '/twirp/{{.Package}}.{{.Name}}/', getServiceMethodName));
};
{{- end}}
`

type service struct {
	Name    string
	Methods []string
	Package string
}

type tmplContext struct {
	Services []service
}

func NewGenerator() *Generator {
	return &Generator{}
}

type Generator struct{}

func (g *Generator) Generate(d *descriptor.FileDescriptorProto) ([]*plugin.CodeGeneratorResponse_File, error) {
	// skip WKT Timestamp, we don't do any special serialization for jsonpb.
	if *d.Name == "google/protobuf/timestamp.proto" {
		return []*plugin.CodeGeneratorResponse_File{}, nil
	}

	ctx := tmplContext{}
	pkg := d.GetPackage()

	for _, s := range d.Service {
		srv := service{
			Name:    s.GetName(),
			Methods: make([]string, 0),
			Package: pkg,
		}

		for _, m := range s.Method {
			srv.Methods = append(srv.Methods, *m.Name)
		}

		ctx.Services = append(ctx.Services, srv)
	}

	tmplFuncs := make(map[string]interface{})
	tmplFuncs["lowerCamel"] = lowerCamel

	t, err := template.New("pbjs_client").Funcs(tmplFuncs).Parse(tmpl)
	if err != nil {
		return nil, err
	}

	b := bytes.NewBufferString("")
	err = t.Execute(b, ctx)
	if err != nil {
		return nil, err
	}

	cf := &plugin.CodeGeneratorResponse_File{}
	cf.Name = proto.String("service.twirp.ts")
	cf.Content = proto.String(b.String())

	return []*plugin.CodeGeneratorResponse_File{cf}, nil
}

func lowerCamel(s string) string {
	return strings.ToLower(s[0:1]) + s[1:]
}
